/**
 *
 * @author Alexander Kimani, Rusty Riedel
 * @email a906k620@ku.edu
 * @file Magnetometer.c
 * @date 09/12/2016
 *
 */

#include	"inc/hw_ints.h"
#include	"inc/hw_memmap.h"
#include	"inc/hw_types.h"
#include	"inc/hw_uart.h"

#include	<stddef.h>
#include	<stdbool.h>
#include	<stdint.h>
#include	<stdarg.h>
#include 	<stdio.h>

#include	"driverlib/sysctl.h"
#include	"driverlib/pin_map.h"
#include	"driverlib/gpio.h"

#include	"FreeRTOS.h"
#include	"task.h"
#include 	"driverlib/timer.h"
#include	"Drivers/uartstdio.h"

#include 	"semphr.h"
#include 	"Task_I2C7_Handler.h"

#include	"sensorlib/ak8975.h"
#include 	"sensorlib/mpu9150.h"

#include	"Tasks/Task_ReportData.h"

#include	"Magnetometer.h"

//global variables
float fMagneto[3];
tMPU9150 sMPU9150;
volatile bool g_bMPU9150Done;
extern tI2CMInstance I2C7_Instance;

extern void MagnetometerInit(){

	//initialize I2C master
	I2C7_Initialization();

	//Initialize the mpu9150
	uint_fast8_t stat9150;
	stat9150 = MPU9150Init(&sMPU9150, I2C7_Instance_Ref, 0x68, MPU9150Callback, 0);
	while(!g_bMPU9150Done){}

	UARTprintf( ">>>>MPU9150Init; Status: %02X\n", stat9150 );
}

extern void MPU9150Callback(void *pvCallbackData, uint_fast8_t ui8Status) {

	// See if an error occurred.s
	if (ui8Status != I2CM_STATUS_SUCCESS) {

		// An error occurred, so handle it here if required.
		UARTprintf( ">>>>I2C7 in 9150 callback Error: %02X\n", ui8Status );
	}

	// Indicate that the MPU9150 transaction has completed.
	g_bMPU9150Done = true;
}

extern void Task_Magnetometer(void *pvParameters) {

	//initialize the magnetometer
	MagnetometerInit();

	//report data for the magnetometer
	ReportData_Item	magnetometerReport;

	//character arrays for outputting the float values via UART
	char buf0[32];
	char buf1[32];
	char buf2[32];

	//FreeRTOS task loop
	while (1) {
		//Read the data from the magnetometer
		g_bMPU9150Done = false;
		MPU9150DataRead(&sMPU9150, MPU9150Callback, 0);
		while(!g_bMPU9150Done){}
		MPU9150DataMagnetoGetFloat(&sMPU9150, &fMagneto[0], &fMagneto[1], &fMagneto[2]);

		//format the data and output via the UART
		/*sprintf(buf0, "%f\n", fMagneto[0]);
		sprintf(buf1, "%f\n", fMagneto[1]);
		sprintf(buf2, "%f\n", fMagneto[2]);
		UARTprintf("x:%sy:%sz:%s\n", buf0, buf1, buf2);
		*/

		//load the data for report data
		magnetometerReport.TimeStamp = xPortSysTickCount;
		magnetometerReport.ReportName = 1;
		magnetometerReport.ReportValue_0 = (int)(fMagneto[0] * 100);
		magnetometerReport.ReportValue_1 = 0;

		xQueueSend(  ReportData_Queue, &magnetometerReport, 0 );

		//FreeRTOS task delay
		vTaskDelay((10000 * configTICK_RATE_HZ) / 10000);
	}
}
